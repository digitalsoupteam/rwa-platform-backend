type Enterprise {
  id: ID!
  name: String!
  status: String!
  productOwner: String!
  image: File
  investmentPresentation: Document
  projectSummary: Document
  aiAnalysis: AIAnalysis
  signatures: [Signature!]
  contractAddress: String
  pools: [Pool!]
  metadata: JSON
  createdAt: String!
  updatedAt: String!
}

type File {
  path: String!
  filename: String!
}

type Document {
  path: String!
  filename: String!
  content: String
}

type AIAnalysis {
  summary: String
  riskScore: Float
}

type Signature {
  signer: String!
  signature: String!
}

type Pool {
  id: ID!
  rwaEnterprise: Enterprise!
  name: String!
  metadata: JSON
  createdAt: String!
  updatedAt: String!
}

input CreateEnterpriseInput {
  name: String!
  productOwner: String!
  image: Upload!
  investmentPresentation: Upload!
  projectSummary: Upload!
}

input CreatePoolInput {
  name: String!
  metadata: JSON
}

type Query {
  enterprises: [Enterprise!]!
  enterprise(id: ID!): Enterprise
  pools: [Pool!]!
  pool(id: ID!): Pool
}

type Mutation {
  createEnterprise(input: CreateEnterpriseInput!): Enterprise!
  requestSignatures(enterpriseId: ID!): Enterprise!
  createPool(enterpriseId: ID!, input: CreatePoolInput!): Pool!
}

type Subscription {
  enterpriseUpdated(id: ID!): Enterprise!
  enterpriseSignaturesUpdated(id: ID!): Enterprise!
}

scalar JSON
scalar Upload
