scalar JSON


type User {
  userId: String!
  wallet: String!
  createdAt: Int!
  updatedAt: Int!
}


type AuthTokens {
  userId: String!
  wallet: String!
  accessToken: String!
  refreshToken: String!
}


type RefreshToken {
  tokenId: String!
  userId: String!
  tokenHash: String!
  expiresAt: Int!
  createdAt: Int!
  updatedAt: Int!
}


type RevokeTokensResult {
  revokedCount: Int!
}


input AuthenticateInput {
  wallet: String!
  signature: String!
  timestamp: Int!
}


input RefreshTokenInput {
  refreshToken: String!
}


input RevokeTokensInput {
  tokenHashes: [String!]!
}

extend type Query {
  getUserTokens: [RefreshToken!]!
}

extend type Mutation {
  authenticate(input: AuthenticateInput!): AuthTokens!
  
  refreshToken(input: RefreshTokenInput!): AuthTokens!
  
  revokeTokens(input: RevokeTokensInput!): RevokeTokensResult!
}