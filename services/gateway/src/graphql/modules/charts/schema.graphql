type PriceData {
  id: String!
  poolAddress: String!
  timestamp: Float!
  blockNumber: Float!
  realHoldReserve: String!
  virtualHoldReserve: String!
  virtualRwaReserve: String!
  price: String!
  createdAt: Float!
  updatedAt: Float!
}

type OhlcData {
  timestamp: Float!
  open: String!
  high: String!
  low: String!
  close: String!
}

type VolumeData {
  timestamp: Float!
  mintVolume: String!
  burnVolume: String!
}

type PoolTransaction {
  id: String!
  poolAddress: String!
  transactionType: String!
  userAddress: String!
  timestamp: Float!
  rwaAmount: String!
  holdAmount: String!
  bonusAmount: String!
  holdFee: String!
  bonusFee: String!
  createdAt: Float!
  updatedAt: Float!
}

input GetRawPriceDataInput {
  poolAddress: String!
  startTime: Float!
  endTime: Float!
  limit: Int
  offset: Int
  sort: JSON
}

input GetOhlcPriceDataInput {
  poolAddress: String!
  interval: String!
  startTime: Float!
  endTime: Float!
  limit: Int
}

input GetPoolTransactionsInput {
  filter: JSON
  sort: JSON
  limit: Int
  offset: Int
}

input GetVolumeDataInput {
  poolAddress: String!
  interval: String!
  startTime: Float!
  endTime: Float!
  limit: Int
}

extend type Query {
  getRawPriceData(input: GetRawPriceDataInput!): [PriceData!]!
  getOhlcPriceData(input: GetOhlcPriceDataInput!): [OhlcData!]!
  getPoolTransactions(input: GetPoolTransactionsInput!): [PoolTransaction!]!
  getVolumeData(input: GetVolumeDataInput!): [VolumeData!]!
}

type PriceUpdateEvent {
  poolAddress: String!
  timestamp: Float!
  price: String!
  realHoldReserve: String!
  virtualHoldReserve: String!
  virtualRwaReserve: String!
}

type TransactionEvent {
  poolAddress: String!
  timestamp: Float!
  transactionType: String! # MINT or BURN
  userAddress: String!
  rwaAmount: String!
  holdAmount: String!
  bonusAmount: String
  holdFee: String!
  bonusFee: String
}

extend type Subscription {
  priceUpdates(poolAddress: String!): PriceUpdateEvent!
  transactionUpdates(poolAddress: String!): TransactionEvent!
}