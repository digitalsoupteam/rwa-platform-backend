scalar JSON

enum BusinessOwnerType {
  company
  user
}

type Business {
  id: ID!
  chainId: String!
  name: String!
  ownerId: String!
  ownerType: String!
  ownerWallet: String
  tokenAddress: String
  description: String
  tags: [String!]
  riskScore: Float!
  image: String
  approvalSignaturesTaskId: String
  approvalSignaturesTaskExpired: Float
  paused: Boolean!
  createdAt: Float!
  updatedAt: Float!
}

type Pool {
  id: ID!
  ownerId: String!
  ownerType: String!
  ownerWallet: String
  name: String!
  businessId: String!
  description: String
  chainId: String!
  tags: [String!]
  riskScore: Float!
  image: String

  # Contract Addresses
  rwaAddress: String!
  poolAddress: String
  holdToken: String
  tokenId: String

  # Pool Configuration
  entryFeePercent: String
  exitFeePercent: String
  expectedHoldAmount: String
  expectedRwaAmount: String
  expectedBonusAmount: String
  rewardPercent: String
  priceImpactPercent: String
  liquidityCoefficient: String

  # Pool Flags
  awaitCompletionExpired: Boolean!
  floatingOutTranchesTimestamps: Boolean!
  fixedSell: Boolean!
  allowEntryBurn: Boolean!
  paused: Boolean!

  # Time Periods
  entryPeriodStart: Float
  entryPeriodExpired: Float
  completionPeriodExpired: Float
  floatingTimestampOffset: Float!
  fullReturnTimestamp: Float

  # Pool State
  k: String
  realHoldReserve: String
  virtualHoldReserve: String
  virtualRwaReserve: String
  isTargetReached: Boolean!
  isFullyReturned: Boolean!

  # Amounts
  totalClaimedAmount: String
  totalReturnedAmount: String
  awaitingBonusAmount: String
  awaitingRwaAmount: String
  outgoingTranchesBalance: String

  # Tranches
  outgoingTranches: [OutgoingTranche!]!
  incomingTranches: [IncomingTranche!]!
  lastCompletedIncomingTranche: Int!

  # Approval
  approvalSignaturesTaskId: String
  approvalSignaturesTaskExpired: Float

  # Timestamps
  createdAt: Float!
  updatedAt: Float!
}

type OutgoingTranche {
  amount: String!
  timestamp: Float!
  executedAmount: String!
}

type IncomingTranche {
  amount: String!
  expiredAt: Float!
  returnedAmount: String!
}

input CreateBusinessWithAIInput {
  description: String!
  ownerId: String!
  ownerType: BusinessOwnerType!
  chainId: String!
}

input CreateBusinessInput {
  name: String!
  ownerId: String!
  ownerType: BusinessOwnerType!
  chainId: String!
  description: String
  tags: [String!]
}

input EditBusinessInput {
  id: ID!
  updateData: EditBusinessDataInput!
}

input EditBusinessDataInput {
  name: String
  description: String
  tags: [String!]
  image: String
  chainId: String
}

input CreatePoolWithAIInput {
  description: String!
  businessId: String!
}

input CreatePoolInput {
  name: String!
  businessId: String!
  entryFeePercent: String
  exitFeePercent: String
  expectedHoldAmount: String
  expectedRwaAmount: String
  rewardPercent: String
  entryPeriodStart: Float
  entryPeriodExpired: Float
  completionPeriodExpired: Float
  awaitCompletionExpired: Boolean
  floatingOutTranchesTimestamps: Boolean
  fixedSell: Boolean
  allowEntryBurn: Boolean
  priceImpactPercent: String
  outgoingTranches: [OutgoingTrancheInput!]
  incomingTranches: [IncomingTrancheInput!]
  description: String
  tags: [String!]
  image: String
}

input EditPoolInput {
  id: ID!
  updateData: EditPoolDataInput!
}

input EditPoolDataInput {
  chainId: String
  name: String
  entryFeePercent: String
  exitFeePercent: String
  expectedHoldAmount: String
  expectedRwaAmount: String
  rewardPercent: String
  entryPeriodStart: Float
  entryPeriodExpired: Float
  completionPeriodExpired: Float
  awaitCompletionExpired: Boolean
  floatingOutTranchesTimestamps: Boolean
  fixedSell: Boolean
  allowEntryBurn: Boolean
  priceImpactPercent: String
  outgoingTranches: [OutgoingTrancheInput!]
  incomingTranches: [IncomingTrancheInput!]
  description: String
  tags: [String!]
  image: String
}

input OutgoingTrancheInput {
  amount: String!
  timestamp: Float!
  executedAmount: String!
}

input IncomingTrancheInput {
  amount: String!
  expiredAt: Float!
  returnedAmount: String!
}

input RequestBusinessApprovalSignaturesInput {
  id: ID!
  ownerWallet: String!
  deployerWallet: String!
  createRWAFee: String!
}

input RequestPoolApprovalSignaturesInput {
  id: ID!
  ownerWallet: String!
  deployerWallet: String!
  createPoolFeeRatio: String!
}

type ApprovalSignaturesResponse {
  taskId: String!
}

input FilterInput {
  filter: JSON
  sort: JSON
  limit: Int
  offset: Int
}

extend type Query {
  # Business queries
  getBusiness(id: ID!): Business!
  getBusinesses(input: FilterInput!): [Business!]!

  # Pool queries
  getPool(id: ID!): Pool!
  getPools(input: FilterInput!): [Pool!]!
}

extend type Mutation {
  # Business mutations
  createBusinessWithAI(input: CreateBusinessWithAIInput!): Business!
  createBusiness(input: CreateBusinessInput!): Business!
  editBusiness(input: EditBusinessInput!): Business!
  updateBusinessRiskScore(id: ID!): Business!
  requestBusinessApprovalSignatures(input: RequestBusinessApprovalSignaturesInput!): ApprovalSignaturesResponse!
  rejectBusinessApprovalSignatures(id: ID!): Boolean!

  # Pool mutations
  createPoolWithAI(input: CreatePoolWithAIInput!): Pool!
  createPool(input: CreatePoolInput!): Pool!
  editPool(input: EditPoolInput!): Pool!
  updatePoolRiskScore(id: ID!): Pool!
  requestPoolApprovalSignatures(input: RequestPoolApprovalSignaturesInput!): ApprovalSignaturesResponse!
  rejectPoolApprovalSignatures(id: ID!): Boolean!
}

extend type Subscription {
  poolDeployed: Pool!
}