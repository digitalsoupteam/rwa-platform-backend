load_module modules/ngx_http_vhost_traffic_status_module.so;


events {
    worker_connections 1024;
}


http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Common proxy settings
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    # JSON logging format
    log_format extended_json escape=json '{"time":"$time_iso8601","status":"$status","request":"$request","request_time":"$request_time","remote_addr":"$remote_addr","body_bytes_sent":$body_bytes_sent}';
    access_log /var/log/nginx/access.log extended_json;

    # VTS configuration
    vhost_traffic_status_zone;
    vhost_traffic_status_filter_check_duplicate on;
    
    # Use Cloudflare country code directly
    map $http_cf_ipcountry $country_code {
        default "unknown";
        "~^[A-Z]{2}$" $http_cf_ipcountry;
    }
    
    # Filter by country for unique users
    vhost_traffic_status_filter_by_set_key $country_code user_country;

    # Real IP configuration
    real_ip_header CF-Connecting-IP;
    set_real_ip_from 0.0.0.0/0;

    # Upstream configuration for services
    upstream gateway_backend {
        server gateway:3000;
    }

    # Monitoring server (internal access only)
    server {
        listen 8080;
        server_name _;
        
        # Allow access only from internal network
        allow 127.0.0.1;
        allow 172.16.0.0/12; # Docker network
        allow 192.168.0.0/16; # Local network
        deny all;

        # Nginx metrics endpoint
        location /nginx_status {
            stub_status on;
            access_log off;
        }

        # VTS HTML status page
        location /status {
            vhost_traffic_status_display;
            vhost_traffic_status_display_format html;
        }

        # VTS Prometheus metrics
        location /metrics {
            vhost_traffic_status_display;
            vhost_traffic_status_display_format prometheus;
        }
    }

    # HTTP server for redirects
    server {
        listen 80 default_server;
        server_name _;

        # Redirect all HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl default_server;
        server_name _;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        
        # SSL settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        
        # HSTS (uncomment if needed)
        # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
        
        # Common proxy headers
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Default nginx welcome page
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        # Gateway Service
        location /gateway/ {
            proxy_pass http://gateway_backend/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # CORS configuration
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
        }

        # Admin Panels

        # # Bull Board - Queue Management
        # location /administration/bull-board/ {
        #     # Basic Authentication
        #     auth_basic "Restricted Access";
        #     auth_basic_user_file /etc/nginx/conf.d/.htpasswd;
            
        #     proxy_pass http://bull-board:3003/;
        #     proxy_http_version 1.1;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection $connection_upgrade;

        #     # Fix for static resources
        #     sub_filter_types *;
        #     sub_filter_once off;
        #     sub_filter 'href="/' 'href="/administration/bull-board/';
        #     sub_filter 'src="/' 'src="/administration/bull-board/';
        #     sub_filter 'action="/' 'action="/administration/bull-board/';
        # }
        
        # # RabbitMQ Management
        # location /administration/rabbitmq/ {
        #     # Basic Authentication
        #     auth_basic "Restricted Access";
        #     auth_basic_user_file /etc/nginx/conf.d/.htpasswd;

        #     proxy_pass http://rabbitmq:15672/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        # }

        # # Mongo Express
        # location /administration/mongo-express/ {
        #     # Basic Authentication
        #     auth_basic "Restricted Access";
        #     auth_basic_user_file /etc/nginx/conf.d/.htpasswd;

        #     proxy_pass http://mongo-express:8081/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
            
        #     # Fix for static resources
        #     sub_filter_types *;
        #     sub_filter_once off;
        #     sub_filter 'href="/' 'href="/administration/mongo-express/';
        #     sub_filter 'src="/' 'src="/administration/mongo-express/';
        #     sub_filter 'action="/' 'action="/administration/mongo-express/';
        # }

        # # Redis Commander
        # location /administration/redis-commander/ {
        #     # Basic Authentication
        #     auth_basic "Restricted Access";
        #     auth_basic_user_file /etc/nginx/conf.d/.htpasswd;

        #     proxy_pass http://redis-commander:8081/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # }

        # # Grafana
        # location /administration/grafana/ {
        #     # Basic Authentication
        #     auth_basic "Restricted Access";
        #     auth_basic_user_file /etc/nginx/conf.d/.htpasswd;

        #     rewrite  ^/grafana/(.*)  /$1 break;
        #     proxy_set_header Host $http_host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;

        #     # WebSocket support
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection "upgrade";

        #     proxy_pass http://grafana:3000;
        # }

        # Error handling
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
